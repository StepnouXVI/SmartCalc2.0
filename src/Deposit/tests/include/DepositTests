#pragma once

#include <gtest/gtest.h>
#include <cmath>
#include <Deposit/DepositCompute>
using namespace Deposit;

#define ASYMMETRY(X, Y) std::abs((long double)X - (long double)Y) / ((long double)X + (long double)Y)

TEST(Success, Simple_test1)
{
    DepositInfo info = {.InitialAmount = 2000000,
                        .Term = 365 * 2,
                        .InterestRate = 0.11,
                        .Capitalization = false,
                        .TaxRate = 0,
                        .PeriodOfPayment = 30};

    DepositComputer deposit = DepositComputer(info);

    auto result = deposit.ComputeEndStatistic();
    ASSERT_LE(ASYMMETRY(2000000 / 100 * 11 * 2, (result.AccruedInterest)), 0.01);
    ASSERT_LE(ASYMMETRY(2000000 * 1.22, (result.Amount)), 0.01);
    ASSERT_EQ(result.TotalTax, 0);
}

TEST(Success, Simple_test2_with_capitalization)
{
    DepositInfo info = {.InitialAmount = 2000000,
                        .Term = 365 * 5,
                        .InterestRate = 0.11,
                        .Capitalization = true,
                        .TaxRate = 0,
                        .PeriodOfPayment = 365};

    DepositComputer deposit = DepositComputer(info);

    auto result = deposit.ComputeEndStatistic();
    ASSERT_LE(ASYMMETRY(2000000 * (std::pow(1.11, 5) - 1.0), (result.AccruedInterest)), 0.01);
    ASSERT_LE(ASYMMETRY(2000000 * std::pow(1.11, 5), (result.Amount)), 0.01);
    ASSERT_EQ(result.TotalTax, 0);
}
