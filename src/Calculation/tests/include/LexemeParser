#include <Calculation/LexemeParser>
#include<Calculation/Operations/NumberOperation>
#include<gtest/gtest.h>

using namespace Preprocessor;
using namespace std;

class LexemeParserTest : public ::testing::Test
{
  protected:
    void SetUp() override
    {
        auto map = make_shared<unordered_map<string, shared_ptr<Operations::IOperation>>>();
        vector<string> functions = {"tg", "ctg", "log", "ln", "sin", "cos", "x"};
        for (int i = 0; i < 7; i++)
        {
            map->insert({functions[i], make_shared<Operations::NumberOperation>(i)});
        }

        auto operators = make_shared<set<char>>();
        operators->insert('+');
        operators->insert('-');
        operators->insert('*');
        operators->insert('/');
        operators->insert('^');

        data = make_shared<Calculation::OperationsData>();
        data->Operations = map;
        data->Operators = operators;

        parser = make_shared<LexemeParser>(data);
    }
    void TearDown() override
    {
    }

  public:
    static shared_ptr<Calculation::OperationsData> data;
    static shared_ptr<LexemeParser> parser;
};

shared_ptr<Calculation::OperationsData> LexemeParserTest::data = nullptr;
shared_ptr<LexemeParser> LexemeParserTest::parser = nullptr;

TEST_F(LexemeParserTest, Simple)
{
    auto expression = make_shared<string>("tg(x)+9.0+11");

    auto expected = make_shared<queue<string>>();
    expected->push("tg");
    expected->push("(");
    expected->push("x");
    expected->push(")");
    expected->push("+");
    expected->push("9.0");
    expected->push("+");
    expected->push("11");

    auto lexemes = parser->Preprocess(expression);

    ASSERT_EQ(lexemes->size(), expected->size());

    for (int i = 0; i < expected->size(); i++)
    {
        ASSERT_EQ(lexemes->front(), expected->front());
        lexemes->pop();
        expected->pop();
    }
}

TEST_F(LexemeParserTest, SimpleWithSpaces)
{
    auto expression = make_shared<string>("tg( x ) + 9.0 + 11");

    auto expected = make_shared<queue<string>>();
    expected->push("tg");
    expected->push("(");
    expected->push("x");
    expected->push(")");
    expected->push("+");
    expected->push("9.0");
    expected->push("+");
    expected->push("11");

    auto lexemes = parser->Preprocess(expression);

    ASSERT_EQ(lexemes->size(), expected->size());

    for (int i = 0; i < expected->size(); i++)
    {
        ASSERT_EQ(lexemes->front(), expected->front());
        lexemes->pop();
        expected->pop();
    }
}

TEST_F(LexemeParserTest, IncorrectNumber)
{
    auto expression = make_shared<string>("tg(x)+9..0+11");

    ASSERT_THROW(parser->Preprocess(expression), runtime_error);
}

TEST_F(LexemeParserTest, IncorrectDigitWithSpace)
{
    auto expression = make_shared<string>("tg(x)+9 .0+11");

    ASSERT_THROW(parser->Preprocess(expression), runtime_error);
}

TEST_F(LexemeParserTest, UndefinedSymbol)
{
    auto expression = make_shared<string>("tg(x)+9,0+11");

    ASSERT_THROW(parser->Preprocess(expression), runtime_error);
}
